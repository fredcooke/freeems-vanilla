Serial TODO

main loop, disable timer isrs leaving only comms and enter loop with delay sending out errors - this gives possibility to use comms to load better data and reset without engine running at all
globals comments?
split files down to smaller chunks
write functions for wrapping
caveats document - easy to screw up by x, y, z, etc
assumptions document - no small table access in isrs
think about header types and return semantics and buffer location independence etc
Look at pointers for memory rearrangement
Ditto, pointers for paged ram tables etc to make code more readable - not so sure now
Check ALL isr code for refs to TableA - TableD : separate headers out to avoid this problem
Further work on serial errors and debug packets etc
see if we can make the flash block location pointers constants in flash  const volatile
see if const array of injector register locations will work now - may not have had rodata or similar back then...
finish memory management doc
group functions that call each other a lot by page
put things called from everywhere in text/text1 - break text into two chunks, one for stuff that must go there, and one for stuff that is faster if it goes there.
minh special stack pointer return function so we can know if there is room for a flash burn buffer
async errors mask for which to send and which to not send - based on counts or what?
debugs not sent counter and method send if the tx buffer is empty only logic


possibly switch to pointers for all small tables etc to enhance readability :

currently :

(twoDTableUS*)&TablesA.SmallTablesA.injectorDeadTimeTable

Could be

(twoDTableUS*)&(TablesA->injectorDeadTimeTable)

is the above redundant, ie, is the last part already a twodtableus pointer?

or even just

injectorDeadTimeTable

if it was just a pointer...


not serial :
5)  Look at configuration errors and see if they can be done a better way, ie without possibility for an error
3)  Async errors and debugs should be done by saving the count each send period <user defined> and send a
    packet for each count with the appropriate code in it and perhaps a count difference or count total
    too. this could be masked in a similar way to that intended for logging packets.
4)  Standardise the naming of error values, match their ordering to aid in 3)
18) change calls to senderror to increments of counters to be sent via the central error sending function



trivial/unimportant :
12) rawByte or rawValue not consistent
13) packet/payload not consistent
14) type/id not consistent
17) later, refactor to use UART prefix such that flags for CAN can start with CAN and be obviously unambiguous
xx) size/length

